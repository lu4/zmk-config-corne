#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define NAV 1
#define SYM 2
#define ADJ 3
#define EXTRA 4

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        para: para {
            compatible = "zmk,behavior-tap-dance";
            label = "PARA";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        caps: caps {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS";
            #binding-cells = <0>;
            continue-list = <MINUS BACKSPACE>;
        };

        paraless: paraless {
            compatible = "zmk,behavior-mod-morph";
            label = "PARALESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        paragreat: paragreat {
            compatible = "zmk,behavior-mod-morph";
            label = "PARAGREAT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        browsertab: browsertab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp LCTRL>;
        };
    };

    combos {
        compatible = "zmk,combos";

        DebuggingEntry {
            bindings = <&tog 4>;
            key-positions = <36 41>;
            timeout-ms = <10>;
            layers = <0>;
        };

        DebuggingExit {
            bindings = <&tog 4>;
            key-positions = <36 41>;
            timeout-ms = <1000>;
            layers = <4>;
        };

        Ukrainian-h {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <10 22>;
            layers = <0>;
            timeout-ms = <10>;
        };

        Ukrainian-yi {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <11 23>;
            layers = <0>;
            timeout-ms = <10>;
        };

        Transcribe {
            bindings = <&kp LG(LA(ENTER))>;
            key-positions = <11 10 9 8>;
            timeout-ms = <25>;
            layers = <0>;
        };

        Instruct {
            bindings = <&kp LG(LA(LS(ENTER)))>;
            key-positions = <41 8 9 10 11>;
            timeout-ms = <25>;
        };

        Announce {
            bindings = <&kp LG(LC(ENTER))>;
            key-positions = <11 10 9 8>;
            layers = <2>;
            timeout-ms = <25>;
        };

        Search {
            bindings = <&kp LG(BACKSLASH)>;
            key-positions = <36 23>;
            timeout-ms = <75>;
        };

        Next-window {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <24 36>;
            timeout-ms = <10>;
        };

        Previous-window {
            bindings = <&kp LG(LS(GRAVE))>;
            key-positions = <36 24 35>;
            timeout-ms = <10>;
        };

        Ukrainian-comma {
            bindings = <&kp CARET>;
            key-positions = <32 20>;
            timeout-ms = <10>;
            layers = <0>;
        };

        Ukrainian-period {
            bindings = <&kp AMPS>;
            key-positions = <21 33>;
            timeout-ms = <10>;
            layers = <0>;
        };

        alt-f-combo {
            bindings = <&kp LA(F)>;
            key-positions = <37 16>;
            timeout-ms = <10>;
            layers = <0>;
        };
    };

    //

    keymap {
        compatible = "zmk,keymap";

        DEF {
            display-name = "Base";

            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I         &kp O    &kp P     &kp BACKSPACE
&kp LSHFT  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K         &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA     &kp DOT  &kp FSLH  &kp RSHFT
                         &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp LEFT_ALT
            >;
        };

        NAV {
            display-name = "NavNum";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&kp ESC     &kp N1     &kp N2    &kp N3        &kp N4           &kp N5           &kp N6   &kp N7      &kp N8    &kp N9         &kp N0  &trans
&caps_word  &trans     &trans    &kp UP_ARROW  &kp LA(F)        &kp PAGE_UP      &trans   &kp INSERT  &kp HOME  &kp PAGE_UP    &trans  &trans
&kp GRAVE   &kp TILDE  &kp LEFT  &kp DOWN      &kp RIGHT_ARROW  &kp PAGE_DOWN    &trans   &kp DELETE  &kp END   &kp PAGE_DOWN  &trans  &trans
                                 &kp LGUI      &trans           &kp SPACE        &kp RET  &trans      &trans
            >;
        };

        SYM {
            display-name = "Symbols";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESC    &kp EXCL   &kp AT          &kp HASH        &kp DLLR         &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RPAR  &trans
&trans     &trans     &trans          &kp UP_ARROW    &trans           &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT              &kp BSLH  &trans
&kp GRAVE  &kp TILDE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC              &kp PIPE  &trans
                                      &kp LGUI        &trans           &kp SPACE    &kp RET    &trans     &trans
            >;
        };

        ADJ {
            display-name = "System";
            bindings = <
&kp ESC  &kp F1        &kp F2        &kp F3        &kp F4      &kp F5            &kp F6  &kp F7  &kp F8  &kp F9  &kp F10      &kp F11
&trans   &kp F11       &kp F12       &trans        &trans      &studio_unlock    &trans  &trans  &trans  &trans  &trans       &kp F12
&trans   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &bt BT_CLR_ALL    &trans  &trans  &trans  &trans  &bootloader  &trans
                                     &trans        &trans      &trans            &trans  &trans  &trans
            >;
        };

        Debugging {
            display-name = "Debugging";
            bindings = <
&kp ESC  &trans  &kp F2          &kp F4          &kp F5           &kp F5           &kp F5  &kp F8  &kp F10  &kp F11  &kp LS(F11)  &kp F12
&trans   &trans  &trans          &kp UP_ARROW    &trans           &kp PAGE_UP      &trans  &trans  &trans   &trans   &trans       &trans
&trans   &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PAGE_DOWN    &trans  &trans  &trans   &trans   &trans       &trans
                                 &trans          &trans           &trans           &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        l3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
